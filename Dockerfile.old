# ################################################################################
# # Create a stage for building the application.

# ARG RUST_VERSION=1.72.1
# ARG APP_NAME=book-service-app
# FROM rust:${RUST_VERSION}-slim-bullseye AS build
# ARG APP_NAME
# WORKDIR /app
# COPY . /app

# RUN --mount=type=bind,source=src,target=src \
#     --mount=type=bind,source=Cargo.toml,target=Cargo.toml \
#     --mount=type=bind,source=Cargo.lock,target=Cargo.lock \
#     --mount=type=bind,source=migrations,target=migrations \
#     --mount=type=cache,target=/app/target/ \
#     --mount=type=cache,target=/usr/local/cargo/registry/ \
#     <<EOF
# set -e
# cargo build --locked --release
# cp ./target/release/$APP_NAME /bin/server
# EOF

# ################################################################################
# # (e.g., debian@sha256:ac707220fbd7b67fc19b112cee8170b41a9e97f703f588b2cdbbcdcecdd8af57).
# FROM debian:bullseye-slim AS final

# # Create a non-privileged user that the app will run under.
# # See https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#user
# ARG UID=10001
# RUN adduser \
#     --disabled-password \
#     --gecos "" \
#     --home "/nonexistent" \
#     --shell "/sbin/nologin" \
#     --no-create-home \
#     --uid "${UID}" \
#     appuser
# USER appuser

# # Copy the executable from the "build" stage.
# COPY --from=build /bin/server/$APP_NAME /app
# COPY .env  /app/.env
# WORKDIR /app

# # What the container should run when it is started.
# CMD ["./$APP_NAME"]


# # Define arguments
# ARG RUST_VERSION=1.72.1
# ARG APP_NAME=book-service-app

# # Create a stage for building the application.
# FROM rust:${RUST_VERSION} AS build-env
# WORKDIR /app
# COPY . /app
# RUN cargo build --locked --release

# # Create a final stage for running the application.
# FROM gcr.io/distroless/static-debian11 AS final
# COPY --from=build-env /app/target/release/book-service-app /
# COPY .env /
# # WORKDIR /service

# CMD ["./book-service-app"]


# # First stage: Build the Rust application
# FROM rust:1.72.1 as builder

# # Create a new empty shell project
# WORKDIR /app
# COPY . /app

# # Copy over your Cargo.toml and Cargo.lock files to cache your dependencies
# COPY Cargo.toml Cargo.lock ./

# # This is a dummy build to cache the dependencies
# # This will only re-run if your Cargo files change
# RUN cargo build --release
# RUN rm src/*.rs

# # Now, copy your source code
# COPY src ./src

# # Build the application for release
# RUN cargo build --release

# # Second stage: Create the final image
# # FROM debian:buster-slim AS final
# FROM gcr.io/distroless/static-debian11 AS final

# # Copy the binary from the builder stage
# COPY ./target/release/book-service-app /bin

# # Copy the environment file
# COPY .env /bin

# # Set the environment variable to point to the .env file
# ENV ENV_FILE_PATH=/bin/.env

# # Run the binary
# CMD ["./book-service-app"]

# Use the distroless base image
FROM rust:1.72.1 AS final

# Copy the binary from the previous stage or location
COPY ./target/release/book-service-app /bin/book-service-app

WORKDIR /bin

EXPOSE 8090

# Run the binary
CMD ["./book-service-app"]
